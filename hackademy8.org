#+TITLE: Visibilité des méthodes
#+AUTHOR: Laurent Garnier

* La classe =Visibility= à charger

  #+BEGIN_SRC ruby
    class Visibility
      def public_method
	puts "public"
      end

      def without_self
	public_method
	protected_method
	private_method
      end

      def with_self
	self.public_method
	self.protected_method
	self.private_method
      end
  
      protected

      def protected_method
	puts "protected"
      end

      private

      def private_method
	puts "private"
      end
    end
  #+END_SRC
* Evaluation dans =irb=

  #+BEGIN_SRC sh
    irb
    load 'visibility.rb'
    visibility = Visibility.new
    visibility.without_self
    visibility.with_self
    visibility.public_method
    visibility.protected_method
    visibility.private_method
  #+END_SRC

* Ajout d'une nouvelle classe =Extended= et d'une autre =NotRelated=

  #+BEGIN_SRC ruby
    class Visibility
      def public_method
	puts "public"
      end

      def without_self
	public_method
	protected_method
	private_method
      end

      def with_self
	self.public_method
	self.protected_method
	self.private_method
      end
  
      protected

      def protected_method
	puts "protected"
      end

      private

      def private_method
	puts "private"
      end
    end

    class Extended < Visibility
      def call_methods(other)
	other.public_method
	other.protected_method
	other.private
      end
    end

    class NotRelated
      def public_method
	puts "public"
      end

      protected
  
      def protected_method
	puts "protected"
      end

      private
  
      def private_method
	puts "private"
      end
    end
  #+END_SRC
* Evaluation dans =irb=

  #+BEGIN_SRC sh
    irb
    load 'visibility.rb'
    e = Extended.new
    e.call_methods(Visibility.new)
    e.is_a?(Visibility)
    e.call_methods(NotRelated.new)
    e.is_a?(NotRelated)
  #+END_SRC
